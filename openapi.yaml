openapi: 3.0.3
info:
  title: OPS Portal API
  description: |
    API de gestion et de monitoring pour l'Usine Logicielle.
    
    ## Authentification
    Cette API utilise JWT (JSON Web Tokens) pour l'authentification.
    
    ### Flux d'authentification :
    1. Appelez `/auth/login` avec vos credentials
    2. Récupérez le token JWT dans la réponse
    3. Utilisez ce token dans l'en-tête `Authorization: Bearer <token>` pour les endpoints protégés
    
    ### Utilisateurs de test :
    - **alice** / alice123 (rôle: ops)
    - **admin** / admin123 (rôles: admin, ops)
    
    ### Rôles :
    - **ops** : Accès en lecture aux statuts et monitoring
    - **admin** : Accès complet, y compris déploiements
  version: 1.0.0
  contact:
    name: Équipe Ops
    email: ops@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Serveur local (Docker)
  - url: http://ops-portal.local
    description: Serveur Kubernetes local (Ingress)

tags:
  - name: Authentication
    description: Endpoints d'authentification JWT
  - name: API
    description: Endpoints protégés de l'API (nécessitent authentification)
  - name: Health
    description: Endpoints de santé (non protégés)

paths:
  /:
    get:
      tags:
        - Health
      summary: Endpoint racine
      description: Retourne les informations sur le service et la liste des endpoints disponibles
      responses:
        '200':
          description: Informations du service
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: ops-portal
                  version:
                    type: string
                    example: 1.0.0
                  endpoints:
                    type: object
                    properties:
                      auth:
                        type: string
                        example: /auth/login
                      api:
                        type: string
                        example: /api/status
                      health:
                        type: string
                        example: /healthz
                      metrics:
                        type: string
                        example: /metrics

  /healthz:
    get:
      tags:
        - Health
      summary: Health check
      description: Vérifie que le service est en vie
      responses:
        '200':
          description: Service en bonne santé
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /readyz:
    get:
      tags:
        - Health
      summary: Readiness check
      description: Vérifie que le service est prêt à recevoir des requêtes
      responses:
        '200':
          description: Service prêt
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: true

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Connexion utilisateur
      description: |
        Authentifie un utilisateur et retourne un token JWT.
        
        Utilisateurs disponibles :
        - alice / alice123 (rôle: ops)
        - admin / admin123 (rôles: admin, ops)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: alice
                  description: Nom d'utilisateur
                password:
                  type: string
                  format: password
                  example: alice123
                  description: Mot de passe
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    description: Token JWT à utiliser pour les requêtes authentifiées
        '401':
          description: Credentials invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: invalid credentials

  /api/status:
    get:
      tags:
        - API
      summary: Obtenir le statut du système
      description: |
        Retourne l'état actuel des pipelines CI, des artefacts et du monitoring.
        
        **Rôle requis :** ops
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statut récupéré avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  ci:
                    type: array
                    description: État des pipelines CI/CD
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: build
                        last:
                          type: string
                          enum: [success, running, failed]
                          example: success
                  artifacts:
                    type: array
                    description: Liste des artefacts disponibles
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: ops-portal:1.0.0
                        registry:
                          type: string
                          example: internal
                  monitor:
                    type: object
                    description: Informations de monitoring
                    properties:
                      uptime:
                        type: string
                        example: 72h
                      errors_last_hour:
                        type: integer
                        example: 0
                      deps:
                        type: array
                        items:
                          type: string
                        example: [db, cache, queue]
        '401':
          description: Token manquant ou invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: missing token
        '403':
          description: Rôle insuffisant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: forbidden

  /api/deploy:
    post:
      tags:
        - API
      summary: Déclencher un déploiement
      description: |
        Lance un déploiement en production.
        
        **Rôle requis :** admin
      security:
        - bearerAuth: []
      responses:
        '202':
          description: Déploiement déclenché
          content:
            application/json:
              schema:
                type: object
                properties:
                  deployment_run_id:
                    type: string
                    example: run-prod-001
                    description: Identifiant du run de déploiement
        '401':
          description: Token manquant ou invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: missing token
        '403':
          description: Rôle admin requis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: forbidden

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Utilisez un token JWT obtenu via `/auth/login`.
        
        Format : `Authorization: Bearer <token>`

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Message d'erreur
      required:
        - error

  examples:
    LoginAlice:
      value:
        username: alice
        password: alice123
      summary: Connexion avec Alice (rôle ops)
    
    LoginAdmin:
      value:
        username: admin
        password: admin123
      summary: Connexion avec Admin (rôles admin+ops)
